{"id":528,"date":"2025-06-01T18:05:18","date_gmt":"2025-06-01T15:05:18","guid":{"rendered":"http:\/\/192.168.1.108\/?p=528"},"modified":"2025-06-01T18:06:42","modified_gmt":"2025-06-01T15:06:42","slug":"%f0%9f%94%90-terminal-tripwire-build-a-real-time-intrusion-alert-system-on-linux-diy-siem-lite","status":"publish","type":"post","link":"http:\/\/192.168.1.108\/?p=528","title":{"rendered":"\ud83d\udd10 &#8220;Terminal Tripwire: Build a Real-Time Intrusion Alert System on Linux (DIY SIEM Lite)&#8221;"},"content":{"rendered":" <div class=\"mining-post-container\"><style> .mining-post-container { font-family: 'Share Tech Mono', monospace; background: linear-gradient(135deg, #0a111d, #141f30); color: #e0f7ff; border-radius: 20px; padding: 35px; margin-bottom: 40px; box-shadow: 0 0 30px rgba(0, 255, 200, 0.12); animation: fadeIn 1.8s ease-in-out; }\r\n.mining-post-container h2 {\r\nfont-size: 2.2rem;\r\ncolor: #00fff7;\r\ntext-shadow: 0 0 10px #00fff788;\r\nmargin-bottom: 25px;\r\n}\r\n\r\n.mining-post-container .excerpt {\r\nbackground: linear-gradient(145deg, #0e1c2a, #162c3f);\r\npadding: 15px 20px;\r\nborder-radius: 12px;\r\nfont-style: italic;\r\ncolor: #7fffd4;\r\ntext-shadow: 0 0 8px #00ffc2a8;\r\nbox-shadow: 0 0 12px rgba(0, 255, 200, 0.1);\r\nmargin-bottom: 30px;\r\n}\r\n\r\n.mining-post-container h3 {\r\ncolor: #00eaff;\r\nfont-size: 1.5rem;\r\nmargin-top: 30px;\r\ntext-shadow: 0 0 8px #00d9ff99;\r\n}\r\n\r\n.mining-post-container p {\r\nline-height: 1.7;\r\nfont-size: 1.1rem;\r\nmargin: 10px 0 20px;\r\nbackground: rgba(0, 0, 0, 0.35);\r\npadding: 12px 18px;\r\nborder-radius: 10px;\r\n}\r\n\r\npre {\r\nbackground-color: #0b0f14;\r\ncolor: #1affff;\r\npadding: 20px;\r\nborder-radius: 12px;\r\noverflow-x: auto;\r\nbox-shadow: 0 0 18px rgba(0, 255, 200, 0.25);\r\nmargin-top: 15px;\r\n}\r\n\r\ncode {\r\ncolor: #aaffee;\r\nfont-family: 'Fira Code', monospace;\r\n}\r\n\r\n@keyframes fadeIn {\r\nfrom { opacity: 0; transform: translateY(20px); }\r\nto { opacity: 1; transform: translateY(0); }\r\n}\r\n<\/style>\r\n\r\n<h2>\ud83d\udd10 Terminal Tripwire: Build a Real-Time Intrusion Alert System on Linux (DIY SIEM Lite)<\/h2> <div class=\"excerpt\">Turn your Linux terminal into a security sensor. In this guide, you&#8217;ll build a lightweight intrusion detection system using bash, inotify, and Telegram \u2014 no bloated software, no excuses.<\/div> <h3>\ud83d\udc40 Introduction<\/h3> <p>Not all threats need enterprise tools to detect. With a few native Linux utilities, you can monitor your system for suspicious activity and receive **real-time alerts** straight to your device. Think of it as a custom-built, hacker-grade tripwire system \u2014 perfect for servers, home labs, and mining rigs.<\/p> <h3>\ud83d\udd27 What You&#8217;ll Build<\/h3> <p> A bash-based watcher that: <ul> <li>Monitors sensitive directories for file events (create, delete, access)<\/li> <li>Watches for login failures and suspicious auth logs<\/li> <li>Notifies you instantly via Telegram<\/li> <\/ul> <\/p> <h3>\ud83d\udee0\ufe0f Requirements<\/h3> <pre><code>- A Debian\/Ubuntu Linux machine - Root\/sudo access - Telegram account - curl, inotify-tools<\/code><\/pre>\r\n<h3>\ud83d\ude80 Step 1: Install Required Tools<\/h3> <p>Install the `inotify-tools` package to monitor filesystem changes.<\/p> <pre><code>sudo apt update sudo apt install inotify-tools curl<\/code><\/pre>\r\n<h3>\ud83d\udce6 Step 2: Create a Telegram Bot<\/h3> <ol> <li>Open Telegram and search for <code>@BotFather<\/code><\/li> <li>Run <code>\/newbot<\/code> and follow instructions<\/li> <li>Save the generated <strong>bot token<\/strong><\/li> <\/ol> <p>Next, get your personal chat ID (or a group ID if you\u2019re monitoring with a team):<\/p> <pre><code>curl -s https:\/\/api.telegram.org\/bot&lt;your_token&gt;\/getUpdates<\/code><\/pre> <p>Send a test message to the bot and check the response for your chat ID.<\/p>\r\n<h3>\u26a0\ufe0f Step 3: Create Your Alert Script<\/h3> <p>Save this as <code>\/opt\/defense\/send_alert.sh<\/code> and make it executable:<\/p> <pre><code>#!\/bin\/bash TOKEN=\"your_bot_token\" CHAT_ID=\"your_chat_id\" MESSAGE=\"$1\"\r\ncurl -s -X POST https:\/\/api.telegram.org\/bot$TOKEN\/sendMessage\r\n-d chat_id=$CHAT_ID -d text=\"$MESSAGE\"<\/code><\/pre>\r\n\r\n<pre><code>chmod +x \/opt\/defense\/send_alert.sh<\/code><\/pre>\r\n<h3>\ud83d\udce1 Step 4: Monitor Sensitive Folders<\/h3> <p>Create a watcher script:<\/p> <pre><code>#!\/bin\/bash WATCHDIR=\"\/etc\" inotifywait -m -e access,create,delete $WATCHDIR | while read line do \/opt\/defense\/send_alert.sh \"\ud83d\udea8 Activity detected in $WATCHDIR: $line\" done<\/code><\/pre> <p>Make it executable and test it by creating or reading files in \/etc:<\/p> <pre><code>touch \/etc\/testfile cat \/etc\/passwd<\/code><\/pre>\r\n<h3>\ud83d\udd10 Step 5: Monitor SSH Brute Force Attempts<\/h3> <pre><code>tail -Fn0 \/var\/log\/auth.log | \\ while read line ; do echo \"$line\" | grep \"Failed password\" &gt;\/dev\/null if [ $? = 0 ]; then \/opt\/defense\/send_alert.sh \"\ud83d\udd10 SSH Alert: $line\" fi done<\/code><\/pre>\r\n<h3>\ud83e\udde0 Bonus: Add Persistence with Cron<\/h3> <p>Add the watchers to cron so they restart on reboot:<\/p> <pre><code>@reboot \/opt\/defense\/folder_watch.sh &amp; @reboot \/opt\/defense\/ssh_watch.sh &amp;<\/code><\/pre>\r\n<h3>\u2705 Final Thoughts<\/h3> <p>This is not a replacement for full-blown SIEMs or firewalls \u2014 it&#8217;s a rapid-response terminal toolkit that gives you visibility and control. Pair it with fail2ban, proper firewalling, and rootkit scanning for a layered defense.<\/p> <p>Got a mining rig, web server, or homelab? Don&#8217;t leave it blind \u2014 **build your terminal tripwire today.**<\/p> <\/div> <!-- templates\/buttons-placeholder.php -->\n<div class=\"da-reactions-outer TpostID528\">\n\t    <div class=\"da-reactions-data da-reactions-container-async center\"\n         data-type=\"post\"\n         data-id=\"528\"\n         id=\"da-reactions-slot-post-528\">\n        <div class=\"da-reactions-exposed\">\n\t\t\t<img src=\"http:\/\/192.168.1.108\/wp-content\/plugins\/da-reactions\/assets\/dist\/loading.svg\" alt=\"Loading spinner\" width=\"64\" height=\"64\" style=\"width:64px\" \/>\n        <\/div>\n    <\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>\ud83d\udd10 Terminal Tripwire: Build a Real-Time Intrusion Alert System on Linux (DIY SIEM Lite) Turn your Linux terminal into a security sensor. In this guide, you&#8217;ll build a lightweight intrusion detection system using bash, inotify, and Telegram \u2014 no bloated software, no excuses. \ud83d\udc40 Introduction Not all threats need enterprise tools to detect. With a few native Linux utilities, you can monitor your system for suspicious activity and receive **real-time alerts** straight to your device. Think of it as a custom-built, hacker-grade tripwire system \u2014 perfect for servers, home labs, and mining rigs. \ud83d\udd27 What You&#8217;ll Build A bash-based watcher that: Monitors sensitive directories for file events (create, delete, access) Watches for login failures and suspicious auth logs Notifies you instantly via Telegram \ud83d\udee0\ufe0f Requirements &#8211; A Debian\/Ubuntu Linux machine &#8211; Root\/sudo access &#8211; Telegram account &#8211; curl, inotify-tools \ud83d\ude80 Step 1: Install Required Tools Install the `inotify-tools` package to monitor filesystem changes. sudo apt update sudo apt install inotify-tools curl \ud83d\udce6 Step 2: Create a Telegram Bot Open Telegram and search for @BotFather Run \/newbot and follow instructions Save the generated bot token Next, get your personal chat ID (or a group ID if you\u2019re monitoring with a team): curl -s https:\/\/api.telegram.org\/bot&lt;your_token&gt;\/getUpdates Send a test message to the bot and check the response for your chat ID. \u26a0\ufe0f Step 3: Create Your Alert Script Save this as \/opt\/defense\/send_alert.sh and make it executable: #!\/bin\/bash TOKEN=&#8221;your_bot_token&#8221; CHAT_ID=&#8221;your_chat_id&#8221; MESSAGE=&#8221;$1&#8243; curl -s -X POST https:\/\/api.telegram.org\/bot$TOKEN\/sendMessage -d chat_id=$CHAT_ID -d text=&#8221;$MESSAGE&#8221; chmod +x \/opt\/defense\/send_alert.sh \ud83d\udce1 Step 4: Monitor Sensitive Folders Create a watcher script: #!\/bin\/bash WATCHDIR=&#8221;\/etc&#8221; inotifywait -m -e access,create,delete $WATCHDIR | while read line do \/opt\/defense\/send_alert.sh &#8220;\ud83d\udea8 Activity detected in $WATCHDIR: $line&#8221; done Make it executable and test it by creating or reading files in \/etc: touch \/etc\/testfile cat \/etc\/passwd \ud83d\udd10 Step 5: Monitor SSH Brute Force Attempts tail -Fn0 \/var\/log\/auth.log | \\ while read line ; do echo &#8220;$line&#8221; | grep &#8220;Failed password&#8221; &gt;\/dev\/null if [ $? = 0 ]; then \/opt\/defense\/send_alert.sh &#8220;\ud83d\udd10 SSH Alert: $line&#8221; fi done \ud83e\udde0 Bonus: Add Persistence with Cron Add the watchers to cron so they restart on reboot: @reboot \/opt\/defense\/folder_watch.sh &amp; @reboot \/opt\/defense\/ssh_watch.sh &amp; \u2705 Final Thoughts This is not a replacement for full-blown SIEMs or firewalls \u2014 it&#8217;s a rapid-response terminal toolkit that gives you visibility and control. Pair it with fail2ban, proper firewalling, and rootkit scanning for a layered defense. Got a mining rig, web server, or homelab? Don&#8217;t leave it blind \u2014 **build your terminal tripwire today.**<\/p>\n<!-- templates\/buttons-placeholder.php -->\n<div class=\"da-reactions-outer TpostID528\">\n\t    <div class=\"da-reactions-data da-reactions-container-async center\"\n         data-type=\"post\"\n         data-id=\"528\"\n         id=\"da-reactions-slot-post-528\">\n        <div class=\"da-reactions-exposed\">\n\t\t\t<img src=\"http:\/\/192.168.1.108\/wp-content\/plugins\/da-reactions\/assets\/dist\/loading.svg\" alt=\"Loading spinner\" width=\"64\" height=\"64\" style=\"width:64px\" \/>\n        <\/div>\n    <\/div>\n<\/div>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[7,10],"tags":[],"class_list":["post-528","post","type-post","status-publish","format-standard","hentry","category-security-hacking","category-tools-scripts"],"rttpg_featured_image_url":null,"rttpg_author":{"display_name":"anon","author_link":"http:\/\/192.168.1.108\/?author=1"},"rttpg_comment":0,"rttpg_category":"<a href=\"http:\/\/192.168.1.108\/?cat=7\" rel=\"category\">Security &amp; Hacking<\/a> <a href=\"http:\/\/192.168.1.108\/?cat=10\" rel=\"category\">Tools &amp; Scripts<\/a>","rttpg_excerpt":"\ud83d\udd10 Terminal Tripwire: Build a Real-Time Intrusion Alert System on Linux (DIY SIEM Lite) Turn your Linux terminal into a security sensor. In this guide, you&#8217;ll build a lightweight intrusion detection system using bash, inotify, and Telegram \u2014 no bloated software, no excuses. \ud83d\udc40 Introduction Not all threats need enterprise tools to detect. With a&hellip;","_links":{"self":[{"href":"http:\/\/192.168.1.108\/index.php?rest_route=\/wp\/v2\/posts\/528","targetHints":{"allow":["GET"]}}],"collection":[{"href":"http:\/\/192.168.1.108\/index.php?rest_route=\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/192.168.1.108\/index.php?rest_route=\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/192.168.1.108\/index.php?rest_route=\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"http:\/\/192.168.1.108\/index.php?rest_route=%2Fwp%2Fv2%2Fcomments&post=528"}],"version-history":[{"count":1,"href":"http:\/\/192.168.1.108\/index.php?rest_route=\/wp\/v2\/posts\/528\/revisions"}],"predecessor-version":[{"id":529,"href":"http:\/\/192.168.1.108\/index.php?rest_route=\/wp\/v2\/posts\/528\/revisions\/529"}],"wp:attachment":[{"href":"http:\/\/192.168.1.108\/index.php?rest_route=%2Fwp%2Fv2%2Fmedia&parent=528"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/192.168.1.108\/index.php?rest_route=%2Fwp%2Fv2%2Fcategories&post=528"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/192.168.1.108\/index.php?rest_route=%2Fwp%2Fv2%2Ftags&post=528"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}