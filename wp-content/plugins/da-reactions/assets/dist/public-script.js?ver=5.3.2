/*! Build: 4/30/2025, 10:25:23 PM */
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/public.es6":
/*!***************************!*\
  !*** ./src/js/public.es6 ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scrollSpot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scrollSpot */ \"./src/js/scrollSpot.js\");\n/* global DaReactions */\n\n\n\n/**\n * Global plugin options object\n *\n * @type {*|{ajax_url: string}}\n *\n * @since 1.0.0\n */\nwindow.DaReactions = {\n    ...{\n        ajax_url: '',\n        display_detail_modal: 'off',\n        display_detail_modal_toolbar: 'off',\n        display_detail_tooltip: 'off',\n        display_name: '',\n        emotion_id: 0,\n        labels: {\n            modal_no_tabs_title: 'Reactions',\n            modal_tab_all_title: 'All reactions',\n            modal_pagination_close: '×',\n            modal_pagination_next: '→',\n            modal_pagination_prev: '←',\n            modal_pagination_desc: 'Page {current} of {total}'\n        },\n        loader_url: '',\n        modal_result_limit: 0,\n        nonce: '',\n        pagination: {\n            index: 0,\n            total: 0,\n            size: 0\n        },\n        reactions: [],\n        show_count: '',\n        tooltip_result_limit: 0,\n        user_link: ''\n    }, ...DaReactions\n};\n\n(function ($) {\n\n    /**\n     * Callback for click on reaction image to save reaction\n     *\n     * @since 1.0.0\n     */\n    function clickedReaction() {\n        // gets all parameters\n        let me = $(this).closest('.da-reactions-data'),\n            my_type = $(me).data('type'),\n            my_id = $(me).data('id'),\n            my_reaction = $(me).data('reaction'),\n            my_nonce = $(me).data('nonce') || DaReactions.nonce,\n            clicked_image = $(me).find('img'),\n            siblings = $('.da-reactions-outer.T' + my_type + 'ID' + my_id),\n            outer_container = $(me).closest('.da-reactions-outer'),\n            before_reveal_container = $(outer_container).find('.before-reveal'),\n            target_image = before_reveal_container.find('img'),\n            target_total_count = before_reveal_container.find('.count');\n\n        const current_image_src = target_image.attr('src');\n        target_image.attr('src', DaReactions.loader_url);\n\n        removeFromCache('clickedCount', my_type, my_id);\n        removeFromCache('mouseOverCount', my_type, my_id);\n\n        // calls ajax service\n        $.ajax({\n            url: DaReactions.ajax_url,\n            method: 'post',\n            cache: false,\n            data: {\n                'action': 'da_reactions_add_reaction',\n                'id': my_id,\n                'nonce': my_nonce,\n                'reaction': my_reaction,\n                'type': my_type\n            },\n            success: function (result) {\n                if (result.success === 'ok') {\n                    removeFromCache('mouseOverCount', my_type, my_id)\n                    // update classes and labels\n                    $(siblings).each(function () {\n                        let before_reveal_container = $(this).find('.before-reveal');\n                        let target_image = before_reveal_container.find('img');\n                        let foundCurrent = false;\n                        let totalScore = 0;\n                        if (target_image.length) {\n                            target_image.attr('src', clicked_image.attr('src'));\n                        }\n                        let showCount = DaReactions.show_count;\n                        if ($('select#show_count').length) {\n                            showCount = $('select#show_count').val();\n                        }\n                        const showCountBeforeReveal = {\n                            'always': 'always',\n                            'percentage': 'always',\n                            'non-zero': 'non-zero',\n                            'percentage-non-zero': 'percentage-non-zero',\n                            'never': 'never'\n                        }[showCount] || 'never';\n                        let currentPercentage = '0%';\n                        for (let a in result['reactions']) {\n                            if (result['reactions'].hasOwnProperty(a)) {\n\n                                let $ico = $(this).find('.reaction.reaction_' + result['reactions'][a]['ID']);\n                                const reactionCount = result['reactions'][a]['total'] || 0;\n                                const reactionPercentage = Math.round(+result['reactions'][a]['percentage'] || 0) + '%';\n                                const $countBadge = $ico.find('.count');\n\n                                if (result['reactions'][a]['current']) {\n                                    foundCurrent = true;\n                                    $ico.addClass('active');\n                                    $ico.removeClass('inactive');\n                                    currentPercentage = reactionPercentage;\n                                } else {\n                                    $ico.removeClass('active');\n                                    $ico.addClass('inactive');\n                                }\n\n                                switch (showCount) {\n                                    case 'always':\n                                        $countBadge.attr('data-value', numberFormatter(reactionCount));\n                                        $countBadge.show();\n                                        break;\n                                    case 'percentage':\n                                        $countBadge.attr('data-value', reactionPercentage);\n                                        $countBadge.show();\n                                        break;\n                                    case 'non-zero':\n                                        $countBadge.attr('data-value', numberFormatter(reactionCount));\n                                        if (reactionCount > 0) {\n                                            $countBadge.show();\n                                        } else {\n                                            $countBadge.hide();\n                                        }\n                                        break;\n                                    case 'percentage-non-zero':\n                                        if (reactionPercentage !== '0%') {\n                                            $countBadge.show();\n                                        } else {\n                                            $countBadge.hide();\n                                        }\n                                        $countBadge.attr('data-value', reactionPercentage);\n                                        break;\n                                    case 'never':\n                                        $countBadge.hide();\n                                        break;\n                                }\n                                totalScore += +result['reactions'][a]['total'];\n                            }\n                        }\n                        switch (showCountBeforeReveal) {\n                            case 'always':\n                                target_total_count.attr('data-value', numberFormatter(totalScore));\n                                target_total_count.show();\n                                break;\n                            case 'non-zero':\n                                if (String(totalScore)[0] === '0') {\n                                    target_total_count.hide();\n                                } else {\n                                    target_total_count.attr('data-value', numberFormatter(totalScore));\n                                }\n                                break;\n                            case 'percentage-non-zero':\n                                target_total_count.attr('data-value', currentPercentage);\n                                target_total_count.show();\n                                break;\n                            case 'never':\n                                target_total_count.hide();\n                                break;\n                        }\n                        if (foundCurrent) {\n                            $(this).closest('.da-reactions-container').addClass('has_current');\n                        } else {\n                            $(this).closest('.da-reactions-container').removeClass('has_current');\n                        }\n                    });\n                } else {\n                    alertWindow(result.message);\n                }\n            },\n            error: () => {\n                target_image.attr('src', current_image_src);\n            }\n        });\n    }\n\n    /**\n     * Toggle visibility of widget on small screen devices\n     *\n     * @param event\n     *\n     * @since 2.0.4\n     */\n    function clickedToggle(event) {\n        event.stopPropagation();\n        $(this).parent().toggleClass('open');\n    }\n\n    /**\n     * Callback for click on count badge, opens details modal\n     *\n     * @since 3.0.0\n     */\n    function clickedCount(e) {\n        const me = e.target;\n        e.preventDefault();\n        removeUserTooltip();\n        let my_container = $(me).closest('.da-reactions-data, .da-reactions-container-async.gutenberg-block'),\n            my_type = $(my_container).data('type'),\n            my_id = $(my_container).data('id'),\n            my_nonce = $(my_container).data('nonce') || DaReactions.nonce,\n            my_reaction = $(me).data('reaction') || $(my_container).data('reaction') || 0,\n            pageNum = $(me).data('pageNum') || 0,\n            result = loadFromCache('clickedCount', my_type, my_id, my_reaction, pageNum);\n        let data = {\n            'action': 'da_reactions_get_users_reactions',\n            'type': my_type,\n            'id': my_id,\n            'nonce': my_nonce,\n            'reaction': my_reaction,\n            'pageNum': pageNum,\n            'limit': parseInt(DaReactions.modal_result_limit, 10)\n        };\n        if (!result || result.success !== 'ok') {\n            $.ajax({\n                url: DaReactions.ajax_url,\n                method: 'post',\n                cache: false,\n                data,\n                success: function (result) {\n                    saveToCache('clickedCount', my_type, my_id, my_reaction, result, pageNum);\n                    if (result.success && result.success === 'ok') {\n                        showUsersModal(result, data);\n                    }\n                }\n            });\n        } else {\n            showUsersModal(result, data);\n        }\n    }\n\n    /**\n     *\n     * @param prefix\n     * @param my_type\n     * @param my_id\n     * @param my_reaction\n     * @param page\n     */\n    function initDaReactionsCache(prefix, my_type, my_id, my_reaction, page) {\n        DaReactions.cache = DaReactions.cache || {};\n        DaReactions.cache[prefix] = DaReactions.cache[prefix] || {};\n        DaReactions.cache[prefix][my_type] = DaReactions.cache[prefix][my_type] || {};\n        DaReactions.cache[prefix][my_type][my_id] = DaReactions.cache[prefix][my_type][my_id] || {};\n        DaReactions.cache[prefix][my_type][my_id][my_reaction] = DaReactions.cache[prefix][my_type][my_id][my_reaction] || {};\n        DaReactions.cache[prefix][my_type][my_id][my_reaction][page] = DaReactions.cache[prefix][my_type][my_id][my_reaction][page] || {};\n    }\n\n    /**\n     * Retrieve cached object to avoid redundant server requests\n     *\n     * @param prefix\n     * @param my_type\n     * @param my_id\n     * @param my_reaction\n     * @param page\n     * @returns {{success: string}|*}\n     *\n     * @since 3.0.0\n     */\n    function loadFromCache(prefix, my_type, my_id, my_reaction, page) {\n        initDaReactionsCache(prefix, my_type, my_id, my_reaction, page);\n\n        if (DaReactions.cache[prefix][my_type][my_id][my_reaction][page].hasOwnProperty('success') && DaReactions.cache[prefix][my_type][my_id][my_reaction][page].success === 'ok') {\n            return DaReactions.cache[prefix][my_type][my_id][my_reaction][page];\n        }\n\n        return {\n            success: 'no'\n        };\n    }\n\n    /**\n     * Remove cached value\n     *\n     * @param prefix\n     * @param my_type\n     * @param my_id\n     * @param my_reaction\n     *\n     * @since 3.0.0\n     */\n    function removeFromCache(prefix = '', my_type = '', my_id = 0, my_reaction = 0) {\n        initDaReactionsCache(prefix, my_type, my_id, my_reaction, 0);\n        if (!!prefix) {\n            if (!!my_type) {\n                if (!!my_id) {\n                    if (!!my_reaction) {\n                        delete DaReactions.cache[prefix][my_type][my_id][my_reaction];\n                    } else {\n                        delete DaReactions.cache[prefix][my_type][my_id];\n                    }\n                } else {\n                    delete DaReactions.cache[prefix][my_type];\n                }\n            } else {\n                delete DaReactions.cache[prefix];\n            }\n        }\n    }\n\n    /**\n     * Save value on local cache\n     *\n     * @param prefix\n     * @param my_type\n     * @param my_id\n     * @param my_reaction\n     * @param value\n     * @param page\n     * @since 3.0.0\n     */\n    function saveToCache(prefix, my_type, my_id, my_reaction, value, page) {\n        initDaReactionsCache(prefix, my_type, my_id, my_reaction, page);\n        DaReactions.cache[prefix][my_type][my_id][my_reaction][page] = value;\n    }\n\n    /**\n     * Display a modal popup with users and reactions list\n     *\n     * @param userReactions\n     * @param requestData\n     *\n     * @since 3.0.0\n     */\n    function showUsersModal(userReactions, requestData) {\n        removeUsersModal();\n        if (!userReactions.reactions.length) {\n            return;\n        }\n        let $modal_background = $('<div>')\n            .attr('id', 'da-reactions-users-modal-background');\n        let $modal = $('<div>')\n            .addClass('da-reactions-data')\n            .data('type', requestData.type)\n            .data('id', requestData.id)\n            .data('limit', requestData.limit)\n            .data('nonce', requestData.nonce)\n            .data('reaction', requestData.reaction);\n        let activeEmotions = {}\n\n        $modal_background.append($modal);\n\n        const $scrollContainer = $('<div>')\n            .addClass('scroll-container');\n        $modal.append($scrollContainer);\n\n        for (const userReaction of userReactions.reactions) {\n            activeEmotions[userReaction.emotion_id] = {\n                image: userReaction.image,\n                label: userReaction.label\n            }\n            const $row = $('<a>')\n                .attr('href', userReaction.user_link || 'javascript:;')\n                .addClass('da-reactions-users-modal-row')\n                .addClass('list')\n                .addClass('reaction' + userReaction.emotion_id);\n            const $rowImage = $(`<img src=\"${userReaction.image}\" alt=\"${userReaction.label}\">`);\n            $row.append($rowImage);\n            const $rowLabel = $('<span>')\n                .text(userReaction.display_name);\n            $row.append($rowLabel);\n            $scrollContainer.append($row);\n        }\n\n        if (Array.isArray(userReactions.buttons)) {\n            const $tools = $('<div>')\n                .addClass('da-reactions-users-modal-row')\n                .addClass('tools');\n\n\n            const $emptyButton = $('<div>')\n                .addClass('da-reactions-button')\n                .addClass('da-reactions-users-modal-toggle')\n                .data('reaction', '0');\n            if (DaReactions.display_detail_modal_toolbar === 'on') {\n                $emptyButton.html(DaReactions.labels.modal_tab_all_title);\n            } else {\n                $emptyButton.html(DaReactions.labels.modal_no_tabs_title);\n            }\n            $emptyButton.on('click', clickedCount);\n            $tools.append($emptyButton);\n\n            let foundCurrent = false;\n\n            if (DaReactions.display_detail_modal_toolbar === 'on') {\n                for (const tool of userReactions.buttons) {\n                    const $toolButton = $('<div>')\n                        .addClass('da-reactions-button')\n                        .addClass('da-reactions-users-modal-toggle')\n                        .addClass('da-reactions-toggle-reaction' + tool.ID)\n                        .data('reaction', tool.ID);\n                    const $toolImage = $(`<img src=\"${tool.image}\" alt=\"${tool.label}\">`)\n                        .data('reaction', tool.ID);\n                    $toolButton.append($toolImage);\n                    if (tool.current) {\n                        $toolButton.addClass('current');\n                        foundCurrent = true;\n                    } else {\n                        $toolButton.on('click', clickedCount);\n                    }\n                    $tools.append($toolButton);\n                }\n            }\n\n            if (!foundCurrent) {\n                $emptyButton.addClass('current');\n            }\n            $modal.prepend($tools);\n        }\n\n        let pageNum = parseInt(userReactions.pagination.index, 10);\n        let pageCount = Math.ceil(userReactions.pagination.total / userReactions.pagination.size);\n\n        let $paginator = $('<div>')\n            .addClass('da-reactions-users-modal-paginator da-reactions-data')\n            .data('type', requestData.type)\n            .data('id', requestData.id)\n            .data('limit', requestData.limit)\n            .data('nonce', requestData.nonce)\n            .data('reaction', requestData.reaction);\n\n        if (pageNum > 1) {\n            const $prevButton = $('<span>')\n                .addClass('da-reactions-users-modal-paginator-back')\n                .html(DaReactions.labels.modal_pagination_prev)\n                .data('pageNum', pageNum - 1);\n            $paginator.append($prevButton);\n            $prevButton.on('click', clickedCount);\n        }\n        const $currentPage = $('<span>')\n            .addClass('da-reactions-users-modal-paginator-text')\n            .text(\n                DaReactions\n                    .labels\n                    .modal_pagination_desc\n                    .replace('{current}', String(pageNum))\n                    .replace('{total}', String(pageCount))\n            );\n        $paginator.append($currentPage);\n        if (pageNum < pageCount) {\n            const $nextButton = $('<span>')\n                .addClass('da-reactions-users-modal-paginator-next')\n                .html('&rarr;')\n                .data('pageNum', pageNum + 1);\n            $paginator.append($nextButton)\n            $nextButton.on('click', clickedCount);\n        }\n\n        $paginator.append($('<span>').addClass('spacer'));\n\n        const $closeButton = $('<span>')\n            .addClass('da-reactions-users-modal-paginator-close')\n            .text(DaReactions.labels.modal_pagination_close)\n            .on('click', removeUsersModal);\n        $paginator.append($closeButton);\n\n        $modal.append($paginator);\n\n        $('body').append($modal_background);\n    }\n\n    /**\n     * Remove modal popup created with showUsersModal\n     *\n     * @since 3.0.0\n     */\n    function removeUsersModal() {\n        $('#da-reactions-users-modal-background').remove();\n    }\n\n    /**\n     * Display a tooltip with latest user’s reactions\n     *\n     * @param userReactions\n     * @param mouseEvent\n     *\n     * @since 3.0.0\n     */\n    function showUserTooltip(userReactions, mouseEvent) {\n        removeUserTooltip();\n        if (!(userReactions && userReactions.length)) {\n            return;\n        }\n        let $tooltip = $('<div id=\"da-reactions-users-tooltip\"></div>')\n            .css({left: mouseEvent.clientX, top: mouseEvent.clientY - 20});\n        let $tooltip_inner = $('<div>');\n        $tooltip.append($tooltip_inner);\n        let count = 0;\n        for (let userReaction of userReactions) {\n            count++;\n            let $row = $('<div class=\"da-reactions-users-tooltip-row\"></div>');\n            $row.append($(`<img src=\"${userReaction.image}\" alt=\"${userReaction.label}\">`));\n            $row.append($(`<span>${userReaction.display_name}</span>`));\n            $tooltip_inner.append($row);\n        }\n        $('body').append($tooltip);\n    }\n\n    /**\n     * Change coordinates of tooltip created by showUserTooltip to follow mouse\n     *\n     * @param mouseEvent\n     *\n     * @since 3.0.0\n     */\n    function moveUserTooltip(mouseEvent) {\n        $('#da-reactions-users-tooltip')\n            .css({left: mouseEvent.clientX, top: mouseEvent.clientY - 20});\n    }\n\n    /**\n     * Remove tooltip created by showUserTooltip\n     *\n     * @since 3.0.0\n     */\n    function removeUserTooltip() {\n        $('#da-reactions-users-tooltip').html('').remove();\n    }\n\n    /**\n     * Callback for mouseover on count badge\n     *\n     * @param event\n     *\n     * @since 3.0.0\n     */\n    function mouseOverCounter(event) {\n        if (!$(this).data('value')) {\n            return;\n        }\n        const my_container = $(this).closest('.da-reactions-data, .da-reactions-container-async.gutenberg-block'),\n            my_type = $(my_container).data('type'),\n            my_id = $(my_container).data('id'),\n            my_nonce = $(my_container).data('nonce') || DaReactions.nonce,\n            my_reaction = $(my_container).data('reaction') || '',\n            result = loadFromCache('mouseOverCount', my_type, my_id, my_reaction, 1),\n            data = {\n                'action': 'da_reactions_get_users_reactions',\n                'type': my_type,\n                'id': my_id,\n                'nonce': my_nonce,\n                'reaction': my_reaction,\n                'limit': parseInt(DaReactions.tooltip_result_limit, 10)\n            };\n\n        if (!result || result.success !== 'ok') {\n            $.ajax({\n                url: DaReactions.ajax_url,\n                method: 'post',\n                cache: false,\n                data,\n                success: function (result) {\n                    if (result.success === 'ok') {\n                        saveToCache('mouseOverCount', my_type, my_id, my_reaction, result, 1);\n                        showUserTooltip(result.reactions, event);\n                    }\n                }\n            });\n        } else if (result.success === 'ok') {\n            showUserTooltip(result.reactions, event);\n        }\n    }\n\n    /**\n     * Callback for mousemove on count badge\n     *\n     * @param event\n     *\n     * @since 3.0.0\n     */\n    function mouseMoveCounter(event) {\n        if ($(event.target).is('.count')) {\n            moveUserTooltip(event);\n        } else {\n            removeUserTooltip();\n        }\n    }\n\n    /**\n     * Callback for mouseout from count badge\n     *\n     * @since 3.0.0\n     */\n    function mouseOutCounter() {\n        removeUserTooltip();\n    }\n\n    /**\n     * Loads reactions on placeholder\n     */\n    function loadReactions() {\n        $.ajax({\n            context: this,\n            cache: false,\n            data: {\n                action: 'da_reactions_load_buttons',\n                type: $(this).data('type'),\n                id: $(this).data('id'),\n                nonce: $(this).data('nonce') || DaReactions.nonce\n            },\n            method: 'post',\n            success: function (result) {\n                $(this).html(result);\n            },\n            url: DaReactions.ajax_url\n        });\n    }\n\n    /**\n     * Utility function to format big numbers\n     *\n     * @param number\n     * @returns {string}\n     *\n     * @since 1.0.0\n     */\n    function numberFormatter(number) {\n        number = (typeof number !== 'undefined') ? +number : 0;\n        let si = [\n            {value: 1, symbol: \"\"},\n            {value: 1E3, symbol: \"K\"},\n            {value: 1E6, symbol: \"M\"},\n            {value: 1E9, symbol: \"G\"},\n            {value: 1E12, symbol: \"T\"},\n            {value: 1E15, symbol: \"P\"},\n            {value: 1E18, symbol: \"E\"},\n            {value: 1E21, symbol: \"Z\"},\n            {value: 1E23, symbol: \"Y\"}\n        ];\n        let rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n        let i;\n        for (i = si.length - 1; i > 0; i--) {\n            if (number >= si[i].value) {\n                break;\n            }\n        }\n        return (number / si[i].value).toFixed(2).replace(rx, \"$1\").replace('.00', '') + si[i].symbol;\n    }\n\n    function alertWindow(message) {\n        const $background = $('<div>')\n            .attr('id', 'da-reactions-users-modal-background');\n\n        const $window = $('<div>')\n            .addClass('da-reactions-window');\n\n        const $paragraph = $('<p>')\n            .addClass('da-reactions-window-paragraph')\n            .text(message);\n\n        const $spacer = $('<div>')\n            .addClass('spacer');\n\n        const $closeButton = $('<span>')\n            .addClass('da-reactions-window-close')\n            .text(DaReactions.labels.modal_pagination_close)\n            .on('click', removeUsersModal);\n\n        $window.append($paragraph);\n        $window.append($spacer);\n        $window.append($closeButton);\n\n        $background.append($window);\n\n        $('body').prepend($background);\n    }\n\n    /**\n     * All actions are down here\n     *\n     * @since 1.0.0\n     */\n    $(document).ready(function () {\n\n        let $daReactionsDocument = $(document);\n\n        /**\n         * Enables Async load of reactions\n         *\n         * @since 1.0.0\n         */\n        _scrollSpot__WEBPACK_IMPORTED_MODULE_0__.vanillaScrollSpot.call($daReactionsDocument[0], loadReactions, \".da-reactions-container-async\");\n\n        /**\n         * Enables click on reaction button through generic selector\n         *\n         * @since 2.0.4\n         */\n        $daReactionsDocument.on('click', '.reaction img', clickedReaction);\n\n        /**\n         * Enables click on reaction count badge though .da-reactions-outer selector\n         *\n         * @since 3.0.0\n         */\n        if (DaReactions.display_detail_modal === 'on') {\n            $daReactionsDocument.on('click', '.da-reactions-outer .count', clickedCount);\n        }\n\n        /**\n         * Enables click on outer count badge for “reveal” template\n         *\n         * @since 3.0.0\n         */\n        if (DaReactions.display_detail_modal === 'on') {\n            $daReactionsDocument.on('click', '.da-reactions-outer .count', clickedCount);\n        }\n\n        /**\n         * Enables click on mobile toggle hamburger\n         *\n         * @since 2.0.4\n         */\n        $daReactionsDocument.on('click', '.reactions-toggle', clickedToggle);\n\n        /**\n         * Enables click on image to open widget in “reveal” template\n         *\n         * @since 3.0.0\n         */\n        $daReactionsDocument.on('click', '.da-reactions-reveal img', function () {\n            $(this).closest('.da-reactions-reveal').toggleClass('active');\n        });\n\n        /**\n         * Close .da-reactions-reveal on click outside\n         *\n         * @since 2.1.1\n         */\n        $daReactionsDocument.on('mouseup', function (event) {\n            let $currentActive = $('.da-reactions-reveal.active:eq(0)');\n            if (!$currentActive.is(event.target) && $currentActive.has(event.target).length === 0) {\n                $currentActive.removeClass('active');\n            }\n        });\n\n        /**\n         * Show reaction users on mouseover\n         *\n         * @since 3.0.0\n         */\n        if (DaReactions.display_detail_tooltip === 'on') {\n            $daReactionsDocument.on('mouseover', '.da-reactions-container .count, .da-reactions-reveal .count', mouseOverCounter);\n        }\n\n        /**\n         * Move tooltip of users on mouseover\n         *\n         * @since 3.0.0\n         */\n        if (DaReactions.display_detail_tooltip === 'on') {\n            $daReactionsDocument.on('mousemove', mouseMoveCounter);\n        }\n\n        /**\n         * Hide reaction users on mouseout\n         *\n         * @since 3.0.0\n         */\n        if (DaReactions.display_detail_tooltip === 'on') {\n            $daReactionsDocument.on('mouseout', '.da-reactions-outer .count', mouseOutCounter);\n        }\n    });\n\n})(jQuery);\n\n\n//# sourceURL=webpack://da-reactions-assets/./src/js/public.es6?");

/***/ }),

/***/ "./src/js/scrollSpot.js":
/*!******************************!*\
  !*** ./src/js/scrollSpot.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   vanillaScrollSpot: () => (/* binding */ vanillaScrollSpot)\n/* harmony export */ });\nfunction vanillaScrollSpot(callback, selector) {\n    \"use strict\";\n\n    // Array to store elements to observe\n    let elementsArray = [];\n    // Use a Set to avoid duplicates\n    let elementsSet = new Set();\n\n    // $(document).ready(); equivalent\n    function ready(fn) {\n        if (document.readyState !== 'loading') {\n            fn();\n        } else {\n            document.addEventListener('DOMContentLoaded', fn);\n        }\n    }\n\n    // Function to check if an element is visible in the viewport\n    function isElementVisible(element) {\n        const elementRect = element.getBoundingClientRect();\n\n        const isVisible = (\n            elementRect.top < window.innerHeight &&\n            elementRect.bottom > 0 &&\n            elementRect.left < window.innerWidth &&\n            elementRect.right > 0\n        );\n\n        return isVisible;\n    }\n\n    // Function to update the elements array to observe\n    function checkElements(parent = document) {\n        if (parent instanceof Node && !['#comment', '#text', 'STYLE', 'SCRIPT'].includes(parent.nodeName)) {\n            const elementsToObserve = parent.querySelectorAll(selector);\n            if (elementsToObserve.length > 0) {\n                elementsToObserve.forEach(item => {\n                    if (item.dataset.processed !== 'true') {\n                        elementsSet.add(item);\n                    }\n                });\n                elementsArray = Array.from(elementsSet);\n            }\n        }\n    }\n\n    // Function to handle each observed element\n    function handleElement(element) {\n        // If the element is visible, execute the callback and update the element's state\n        if (isElementVisible(element)) {\n\n            if (callback && element.dataset.processed !== 'true') {\n                callback.call(element);\n            }\n            element.classList.add('in-viewport', 'spotted');\n            element.dataset.processed = 'true';\n        } else {\n            // If the element is not visible, remove the 'in-viewport' class\n            element.classList.remove('in-viewport');\n        }\n\n        // Use MutationObserver to detect changes in the DOM and update the elements array\n        const observer = new MutationObserver(mutationRecords => {\n            for (const mutationRecord of mutationRecords) {\n                for (const addedNode of mutationRecord.addedNodes) {\n                    checkElements(addedNode);\n                }\n            }\n        });\n        observer.observe(document, {childList: true, characterData: true, attributes: true, subtree: true});\n    }\n\n    // Function to handle resizing and scrolling events\n    function handleResizeScroll() {\n        // Iterate through each element and handle it\n        elementsArray.forEach((element) => {\n            handleElement(element);\n        });\n    }\n\n    // Add event listeners for resizing, scrolling, and DOMContentLoaded\n    window.addEventListener('resize', handleResizeScroll);\n    window.addEventListener('scroll', handleResizeScroll);\n    ready(() => {\n        checkElements();\n        handleResizeScroll();\n    });\n}\n\n\n//# sourceURL=webpack://da-reactions-assets/./src/js/scrollSpot.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/public.es6");
/******/ 	
/******/ })()
;